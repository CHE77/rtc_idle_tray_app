#!/usr/bin/env python3

# Licensed under the Cooperative Non-Violent Public License (CNPL)
# See: https://github.com/CHE77/IoTManager-Modules/blob/main/LICENSE
import os
import sys
import subprocess
import shutil
import importlib

APP_NAME = "rtc_idle_tray"


def ensure_pip_installed():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip
    try:
        import pip
    except ImportError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        answer = input("–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip —á–µ—Ä–µ–∑ apt? [Y/n] ").strip().lower()
        if answer in ("", "y", "yes"):
            try:
                subprocess.run(["sudo", "apt", "update"], check=True)
                subprocess.run(
                    ["sudo", "apt", "install", "-y", "python3-pip"], check=True
                )
                print("‚úÖ pip —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip —á–µ—Ä–µ–∑ apt: {e}")
                sys.exit(1)
        else:
            print("‚õî –ë–µ–∑ pip –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            sys.exit(1)

    REQUIRED_PYTHON_MODULES = {
        "PyQt5": "PyQt5",
        "cv2": "opencv-python-headless",
        "telegram": "python-telegram-bot",
        "pyautogui": "pyautogui",
    }

    missing_pip = []
    for module_name, pip_name in REQUIRED_PYTHON_MODULES.items():
        try:
            importlib.import_module(module_name)
        except ImportError:
            print(
                f"üì¶ –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ '{pip_name}'"
            )
            missing_pip.append(pip_name)

    if missing_pip:
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–ø–∞–∫–µ—Ç–æ–≤: {' '.join(missing_pip)}")
        try:
            subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "pip",
                    "install",
                    "--break-system-packages",
                    *missing_pip,
                ],
                check=True,
            )
            print("‚úÖ Python-–ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç...")
            os.execv(sys.executable, [sys.executable] + sys.argv)
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            sys.exit(1)


# ensure_pip_installed()


# === –®–ê–ì 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ ===
def install_missing_modules():
    REQUIRED_PYTHON_MODULES = {
        "PyQt5": "PyQt5",
        "cv2": "opencv-python-headless",
        "telegram": "python-telegram-bot",
        "pyautogui": "pyautogui",
    }

    REQUIRED_BINARIES = {
        "rtcwake": "util-linux",
        "xprintidle": "xprintidle",
        "gnome-screenshot": "gnome-screenshot",
        "setxkbmap": "x11-xkb-utils",
    }

    missing_pip = []
    for module_name, pip_name in REQUIRED_PYTHON_MODULES.items():
        try:
            importlib.import_module(module_name)
        except ImportError:
            print(
                f"üì¶ –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ '{pip_name}'"
            )
            missing_pip.append(pip_name)

    apt_packages = []
    for bin, pkg in REQUIRED_BINARIES.items():
        if shutil.which(bin) is None:
            apt_packages.append(pkg)

    try:
        import tkinter
    except ImportError:
        py_version = f"{sys.version_info.major}.{sys.version_info.minor}"
        apt_packages += [f"python{py_version}-tk", "python3-dev"]

    if apt_packages:
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ APT-–ø–∞–∫–µ—Ç–æ–≤: {' '.join(apt_packages)}")
        try:
            subprocess.run(["sudo", "apt", "update"], check=True)
            subprocess.run(
                ["sudo", "apt", "install", "-y", "--no-install-recommends"]
                + apt_packages,
                check=True,
            )
            print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ APT: {e}")
            sys.exit(1)

    if missing_pip:
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–ø–∞–∫–µ—Ç–æ–≤: {' '.join(missing_pip)}")
        try:

            subprocess.run(
                [sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True
            )
            # subprocess.run([sys.executable, '-m', 'pip', 'install', '--break-system-packages', *missing_pip], check=True)
            subprocess.run(
                [sys.executable, "-m", "pip", "install", *missing_pip], check=True
            )
            print("‚úÖ Python-–ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç...")
            os.execv(sys.executable, [sys.executable] + sys.argv)
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pip-–ø–∞–∫–µ—Ç–æ–≤: {e}")
            sys.exit(1)

    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã")


# install_missing_modules()


# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
from PyQt5 import QtWidgets, QtGui, QtCore
import cv2
import pyautogui
from telegram import Bot

#!/usr/bin/env python3
import os
import sys
import subprocess
import datetime
import getpass
from datetime import datetime, timezone, timedelta
import shutil

import json
import uuid

import asyncio


APP_NAME = "rtc_idle_tray"
global next_wakeup_dt
next_wakeup_dt = None
debug = False


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è ===
# WAKE_HOUR = 10     # –ß–∞—Å—ã LT
# WAKE_MINUTE = 20  # –ú–∏–Ω—É—Ç—ã LT
# WAKE_OFFSET_DAYS = 0  # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç (0 ‚Äî —Å–µ–≥–æ–¥–Ω—è, 1 ‚Äî –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.)


SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
WAKE_FLAG_PATH = os.path.join(SCRIPT_DIR, ".wake_set")

DEFAULT_WAKE_DATA = {
    "enabled": False,  # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á—ë–Ω
    "time": "07:00",  # –í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    "auto_shutdown": False,  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ
    "idle_timeout": 120,  # –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "terminal": True,
    "telegram_enabled": True,
    "telegram_token": "",
    "telegram_chat_id": "",
}
# 499079294

import importlib


def install_missing_modules1():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python-–º–æ–¥—É–ª–µ–π
    REQUIRED_PYTHON_MODULES = {
        "PyQt5": "PyQt5",
        "cv2": "opencv-python-headless",  # –ë–æ–ª–µ–µ –ª—ë–≥–∫–∞—è –≤–µ—Ä—Å–∏—è OpenCV
        "telegram": "python-telegram-bot",
        "pyautogui": "pyautogui",  # –û–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ python3-xlib
    }

    missing_pip = []
    for module_name, pip_name in REQUIRED_PYTHON_MODULES.items():
        try:
            importlib.import_module(module_name)
        except ImportError:
            print(
                f"üì¶ –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ '{pip_name}'"
            )
            missing_pip.append(pip_name)

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
    REQUIRED_BINARIES = {
        "rtcwake": "util-linux",
        "xprintidle": "xprintidle",
        "gnome-screenshot": "gnome-screenshot",
        "setxkbmap": "x11-xkb-utils",
    }

    apt_packages = []
    for bin, pkg in REQUIRED_BINARIES.items():
        if shutil.which(bin) is None:
            apt_packages.append(pkg)

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ tkinter (–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π)
    try:
        import tkinter
    except ImportError:
        py_version = f"{sys.version_info.major}.{sys.version_info.minor}"
        apt_packages.extend([f"python{py_version}-tk", "python3-dev"])

    # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    if apt_packages:
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ APT-–ø–∞–∫–µ—Ç–æ–≤: {' '.join(apt_packages)}")
        try:
            subprocess.run(["sudo", "apt", "update"], check=True)
            subprocess.run(
                ["sudo", "apt", "install", "-y", "--no-install-recommends"]
                + apt_packages,
                check=True,
            )
            print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False

    # 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–ø–∞–∫–µ—Ç–æ–≤
    if missing_pip:
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–ø–∞–∫–µ—Ç–æ–≤: {' '.join(missing_pip)}")
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True
            )
            subprocess.run(
                [sys.executable, "-m", "pip", "install", *missing_pip], check=True
            )
            print("‚úÖ Python-–ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.")
            return True  # –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False

    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã")
    return True


def load_wake_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not os.path.exists(WAKE_FLAG_PATH):
        print(f"[wake_config] –§–∞–π–ª {WAKE_FLAG_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        save_wake_data(DEFAULT_WAKE_DATA)
        return DEFAULT_WAKE_DATA.copy()
    try:
        with open(WAKE_FLAG_PATH, "r") as f:
            data = json.load(f)
            if debug:
                print(f"[wake_config] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {data}")
            return {**DEFAULT_WAKE_DATA, **data}
    except Exception as e:
        print(f"[wake_config] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.")
        save_wake_data(DEFAULT_WAKE_DATA)
        return DEFAULT_WAKE_DATA.copy()


def save_wake_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(WAKE_FLAG_PATH, "w") as f:
            json.dump(data, f, indent=2)
        if debug:
            print(f"[wake_config] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
    except Exception as e:
        print(f"[wake_config] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")


def set_wake_enabled(enabled: bool):
    data = load_wake_data()
    data["enabled"] = enabled
    save_wake_data(data)
    print(f"[wake_config] –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {enabled}")


def set_wake_time(time_str: str):
    data = load_wake_data()
    data["time"] = time_str.strip()
    save_wake_data(data)
    print(f"[wake_config] –í—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤: {time_str}")


def set_auto_shutdown(enabled: bool):
    data = load_wake_data()
    data["auto_shutdown"] = enabled
    save_wake_data(data)
    print(f"[wake_config] –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Å—Ç–æ—é: {enabled}")


def set_telegram_enabled(enabled: bool):
    data = load_wake_data()
    data["telegram_enabled"] = enabled
    save_wake_data(data)
    print(f"[wake_config] –¢–µ–ª–µ–≥—Ä–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {enabled}")
    ensure_telegram_config()


def set_terminal_enabled(enabled: bool):
    data = load_wake_data()
    data["terminal"] = enabled
    save_wake_data(data)
    print(f"[wake_config] –¢–µ—Ä–º–∏–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {enabled}")


def set_idle_timeout(seconds: int):
    data = load_wake_data()
    data["idle_timeout"] = int(seconds)
    save_wake_data(data)
    print(f"[wake_config] –¢–∞–π–º–∞—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è: {seconds} —Å–µ–∫—É–Ω–¥")


def get_wake_time():
    return load_wake_data()["time"]


def get_idle_timeout():
    return load_wake_data()["idle_timeout"]


def is_wake_enabled():
    return load_wake_data()["enabled"]


def is_auto_shutdown_enabled():
    return load_wake_data()["auto_shutdown"]


def is_terminal_enabled():
    return load_wake_data()["terminal"]


def is_telegram_enabled():
    return load_wake_data().get("telegram_enabled", False)


def get_telegram_token():
    return load_wake_data().get("telegram_token", "")


def get_telegram_chat_id():
    return load_wake_data().get("telegram_chat_id", "")


def ensure_telegram_config():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è token –∏ chat_id, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"""
    data = load_wake_data()

    if not data.get("telegram_enabled"):
        return

    updated = False
    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication(sys.argv)

    if not data.get("telegram_token"):
        token, ok = QtWidgets.QInputDialog.getText(
            None, "Telegram Token", "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token:"
        )
        if ok and token.strip():
            data["telegram_token"] = token.strip()
            updated = True
        else:
            print("‚ùå Token –Ω–µ –≤–≤–µ–¥—ë–Ω. –û—Ç–∫–ª—é—á–∞–µ–º Telegram.")
            data["telegram_enabled"] = False
            save_wake_data(data)
            return

    if not data.get("telegram_chat_id"):
        chat_id, ok = QtWidgets.QInputDialog.getText(
            None, "Telegram Chat ID", "–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID:"
        )
        if ok and chat_id.strip():
            data["telegram_chat_id"] = chat_id.strip()
            updated = True
        else:
            print("‚ùå Chat ID –Ω–µ –≤–≤–µ–¥—ë–Ω. –û—Ç–∫–ª—é—á–∞–µ–º Telegram.")
            data["telegram_enabled"] = False
            save_wake_data(data)
            return

    if updated:
        save_wake_data(data)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


import uuid

from datetime import datetime

import uuid
import os
import subprocess
import asyncio
from datetime import datetime

def _telegram_params():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (token, chat_id, snapshots_dir) –∏–ª–∏ None,
    –µ—Å–ª–∏ Telegram –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.
    """
    data = load_wake_data()
    if not data.get("telegram_enabled"):
        return None

    token, chat_id = data.get("telegram_token"), data.get("telegram_chat_id")
    if not token or not chat_id:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã token –∏–ª–∏ chat_id")
        return None

    snapshots_dir = os.path.join(SCRIPT_DIR, "snapshots")
    os.makedirs(snapshots_dir, exist_ok=True)
    return token, chat_id, snapshots_dir


async def _send_photo(token: str, chat_id: str, file_path: str, caption: str = ""):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ Telegram (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
    if not os.path.exists(file_path):
        return

    try:
        bot = Bot(token=token)
        with open(file_path, "rb") as f:
            await bot.send_photo(chat_id=chat_id, photo=f, caption=caption)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {file_path}")
    except TimedOut:
        print("‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram –∏—Å—Ç–µ–∫–ª–æ.")
    except TelegramError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


def capture_camera_and_send(caption: str = ""):
    """
    –î–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Å –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–∞–º–µ—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram.
    """
    try:
        params = _telegram_params()
        if params is None:
            return
        token, chat_id, snapshots_dir = params

        ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        cam_path = os.path.join(snapshots_dir, f"camera_{ts}.jpg")

        # üì∏ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã
        try:
            cap = cv2.VideoCapture(0)
            ret, frame = cap.read()
            cap.release()
            if ret:
                cv2.imwrite(cam_path, frame)
                print(f"üì∏ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {cam_path}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã")
                return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: {e}")
            return

        # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞
        asyncio.run(_send_photo(token, chat_id, cam_path, caption))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ capture_camera_and_send: {e}")

def capture_screen_and_send(caption: str = ""):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ gnome-screenshot
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram.
    """
    try:
        params = _telegram_params()
        if params is None:
            return
        token, chat_id, snapshots_dir = params

        ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        screen_path = os.path.join(snapshots_dir, f"screen_{ts}.png")

        # üñ• –°–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ gnome-screenshot
        try:
            subprocess.run(["gnome-screenshot", "-f", screen_path], check=True)
            print(f"üñ• –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screen_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return

        # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞
        asyncio.run(_send_photo(token, chat_id, screen_path, caption))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ capture_screen_and_send: {e}")



def show_startup_notification():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞
        script_name = os.path.basename(sys.argv[0])
        app_name = os.path.splitext(script_name)[0]

        subprocess.Popen(
            [
                "notify-send",
                "--icon=system-run",
                "--app-name",
                app_name,
                "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫",
                f"{app_name} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            ]
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


def detect_display_manager():
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ systemctl
        result = subprocess.run(
            ["systemctl", "show", "display-manager.service", "--property=ExecStart"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        line = result.stdout.strip()
        if "gdm" in line.lower():
            return "gdm"
        elif "lightdm" in line.lower():
            return "lightdm"
        elif "sddm" in line.lower():
            return "sddm"
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å–ø–ª–µ–π-–º–µ–Ω–µ–¥–∂–µ—Ä: {e}")
    return "unknown"


def ensure_autostart():
    if debug:
        print("‚úÖ ensure_autostart() run")

    autostart_dir = os.path.expanduser("~/.config/autostart")
    os.makedirs(autostart_dir, exist_ok=True)

    script_path = os.path.realpath(sys.argv[0])
    script_name = os.path.basename(script_path)
    app_name = os.path.splitext(script_name)[0]
    desktop_path = os.path.join(autostart_dir, f"{app_name}.desktop")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π-–º–µ–Ω–µ–¥–∂–µ—Ä
    dm = detect_display_manager().lower()
    print(f"üñ•Ô∏è –î–∏—Å–ø–ª–µ–π-–º–µ–Ω–µ–¥–∂–µ—Ä: {dm}")

    # –ü–æ–¥–±–∏—Ä–∞–µ–º Exec-–∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç terminal-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ DM
    if is_terminal_enabled():
        if dm.startswith("gdm"):
            dm = "gdm"

        print(f"[DEBUG] detect_display_manager() –≤–µ—Ä–Ω—É–ª: {dm!r}")

        if dm == "gdm":
            #exec_cmd = f'gnome-terminal -- bash -c "{script_path}; exec bash"'
            exec_cmd = f'gnome-terminal --window --maximize -- bash -c "{script_path}; exec bash"'
        elif dm == "lightdm":
            #exec_cmd = f'xfce4-terminal --hold --command="{script_path}"'
            exec_cmd = f'xfce4-terminal --maximize --hold --command="{script_path}"'
        else:
            exec_cmd = f'xterm -hold -e "{script_path}"'
    else:
        exec_cmd = f"{sys.executable} {script_path}"

    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .desktop-—Ñ–∞–π–ª–∞
    desktop_content = f"""[Desktop Entry]
Type=Application
Exec={exec_cmd}
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name={app_name}
Comment=Aut–æ–∑–∞–ø—É—Å–∫ –¥–ª—è {app_name}
"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ø–æ Exec
    recreate = True
    if os.path.exists(desktop_path):
        with open(desktop_path, "r") as f:
            existing = f.read()
        if existing.strip() == desktop_content.strip():
            print(f"‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –£–ñ–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {desktop_path}")
            recreate = False
        else:
            print(f"üîÅ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è .desktop-—Ñ–∞–π–ª: {desktop_path}")

    if recreate:
        with open(desktop_path, "w") as f:
            f.write(desktop_content)
        print(f"‚úÖ –§–∞–π–ª –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω: {desktop_path}")


def ensure_rtc_access():
    print("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /dev/rtc0...")
    if not os.path.exists("/dev/rtc0"):
        print("‚ùå /dev/rtc0 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)

    st = os.stat("/dev/rtc0")
    if not (st.st_mode & 0o660):
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /dev/rtc0, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...")
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É rtc, —Å–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–æ udev –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É rtc
        # –ì—Ä—É–ø–ø–∞ rtc –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å - —Å–æ–∑–¥–∞—ë–º –µ—ë –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            subprocess.run(["sudo", "groupadd", "-f", "rtc"], check=True)
            # –ü—Ä–∞–≤–∏–ª–æ udev
            udev_rule = 'KERNEL=="rtc0", GROUP="rtc", MODE="0660"\n'
            udev_path = "/etc/udev/rules.d/99-rtc0.rules"
            with open("rtc0.rules.tmp", "w") as f:
                f.write(udev_rule)
            subprocess.run(["sudo", "mv", "rtc0.rules.tmp", udev_path], check=True)
            subprocess.run(["sudo", "udevadm", "control", "--reload-rules"], check=True)
            subprocess.run(["sudo", "udevadm", "trigger", "/dev/rtc0"], check=True)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É rtc, –µ—Å–ª–∏ –Ω–µ—Ç
            user = getpass.getuser()
            groups = subprocess.check_output(["groups", user]).decode()
            if "rtc" not in groups:
                print(f"üë• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –≤ –≥—Ä—É–ø–ø—É rtc...")
                subprocess.run(["sudo", "usermod", "-aG", "rtc", user], check=True)
                print("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å")
        except subprocess.CalledProcessError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ /dev/rtc0: {e}")
            sys.exit(1)


def add_cap_sys_time():
    path = "/usr/sbin/rtcwake"
    print("‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è cap_sys_time –¥–ª—è rtcwake...")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —Å–∏–º–ª–∏–Ω–∫
    try:
        real_path = os.path.realpath(path)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏: {e}")
        return

    try:
        result = subprocess.run(
            ["getcap", real_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        output = result.stdout.strip()
        if "cap_sys_time" in output:
            print(f"‚úÖ cap_sys_time —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {real_path}: {output}")
            return

        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è cap_sys_time –¥–ª—è {real_path}...")
        subprocess.run(["sudo", "setcap", "cap_sys_time+ep", real_path], check=True)
        print("‚úÖ cap_sys_time —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cap_sys_time: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ cap_sys_time: {e}")


def detect_display_manager():
    try:
        out = subprocess.check_output(
            [
                "loginctl",
                "show-session",
                os.environ.get("XDG_SESSION_ID", ""),
                "-p",
                "Type",
            ],
            text=True,
        )
        # –ò–Ω–æ–≥–¥–∞ XDG_SESSION_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî fallback
    except Exception:
        out = ""
    # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ systemctl
    try:
        out2 = subprocess.check_output(
            ["systemctl", "status", "display-manager"], text=True
        )
        if "lightdm" in out2:
            return "lightdm"
        if "gdm3" in out2:
            return "gdm3"
    except Exception:
        pass
    # fallback –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
    procs = subprocess.check_output(["ps", "axo", "comm"], text=True).splitlines()
    if "lightdm" in procs:
        return "lightdm"
    if "gdm3" in procs or "gdm" in procs:
        return "gdm3"
    return "unknown"


def ensure_gdm_autologin_enabled():
    conf_path = "/etc/gdm3/custom.conf"
    user = os.getenv("USER")
    changed = False

    print(f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ GDM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ {conf_path}...")

    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(conf_path, "r") as f:
        lines = f.readlines()

    in_daemon = False
    found_autologin_enable = False
    found_autologin = False
    found_wayland = False

    new_lines = []
    for line in lines:
        stripped = line.strip()

        if stripped.startswith("[") and "daemon" in stripped.lower():
            in_daemon = True
            new_lines.append(line)
            continue
        elif stripped.startswith("[") and not "daemon" in stripped.lower():
            in_daemon = False

        if in_daemon:
            if stripped.startswith("AutomaticLoginEnable"):
                found_autologin_enable = True
                if stripped.lower() != "automaticloginenable=true":
                    print("üîÅ –ó–∞–º–µ–Ω—è–µ—Ç—Å—è AutomaticLoginEnable ‚Üí true")
                    new_lines.append("AutomaticLoginEnable=true\n")
                    changed = True
                else:
                    print("‚úÖ AutomaticLoginEnable —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true")
                    new_lines.append(line)
                continue

            elif stripped.startswith("AutomaticLogin"):
                found_autologin = True
                if stripped != f"AutomaticLogin={user}":
                    print(f"üîÅ –ó–∞–º–µ–Ω—è–µ—Ç—Å—è AutomaticLogin ‚Üí {user}")
                    new_lines.append(f"AutomaticLogin={user}\n")
                    changed = True
                else:
                    print("‚úÖ AutomaticLogin —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ—Ä–Ω–æ")
                    new_lines.append(line)
                continue

            elif stripped.startswith("WaylandEnable"):
                found_wayland = True
                if stripped.lower() != "waylandenable=false":
                    print("üîÅ –ó–∞–º–µ–Ω—è–µ—Ç—Å—è WaylandEnable ‚Üí false")
                    new_lines.append("WaylandEnable=false\n")
                    changed = True
                else:
                    print("‚úÖ WaylandEnable —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ false (X11 –≤–∫–ª—é—á—ë–Ω)")
                    new_lines.append(line)
                continue

        new_lines.append(line)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏—é [daemon]
    if not found_autologin_enable or not found_autologin or not found_wayland:
        print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏—é [daemon]...")
        updated_lines = []
        inserted = False
        for line in new_lines:
            updated_lines.append(line)
            if line.strip().startswith("[daemon]") and not inserted:
                if not found_autologin_enable:
                    print("‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è AutomaticLoginEnable=true")
                    updated_lines.append("AutomaticLoginEnable=true\n")
                if not found_autologin:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è AutomaticLogin={user}")
                    updated_lines.append(f"AutomaticLogin={user}\n")
                if not found_wayland:
                    print("‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è WaylandEnable=false")
                    updated_lines.append("WaylandEnable=false\n")
                inserted = True
        new_lines = updated_lines
        changed = True

    if changed:
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GDM...")
        backup_path = conf_path + ".bak"
        print(f"üìÇ –°–æ–∑–¥–∞—ë—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        subprocess.run(["sudo", "cp", conf_path, backup_path])
        with open("/tmp/custom.conf.new", "w") as f:
            f.writelines(new_lines)
        subprocess.run(["sudo", "cp", "/tmp/custom.conf.new", conf_path])
        print("‚úÖ GDM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        print("‚úÖ –ê–≤—Ç–æ–ª–æ–≥–∏–Ω –∏ X11 —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è GDM.")


def ensure_lightdm_autologin_enabled():
    conf_dir = "/etc/lightdm/lightdm.conf.d"
    conf_file = "50-autologin.conf"
    conf_path = os.path.join(conf_dir, conf_file)
    user = os.getenv("USER")
    changed = False

    print(f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LightDM –≤ {conf_path}...")

    if not os.path.exists(conf_path):
        print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞...")
        lines = ["[Seat:*]\n", f"autologin-user={user}\n", "autologin-user-timeout=0\n"]
        with open("/tmp/autologin_lightdm.conf", "w") as f:
            f.writelines(lines)
        subprocess.run(["sudo", "cp", "/tmp/autologin_lightdm.conf", conf_path])
        print("‚úÖ –§–∞–π–ª –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω –¥–ª—è LightDM.")
        return

    # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    with open(conf_path, "r") as f:
        lines = f.readlines()

    in_seat = False
    found_autologin_user = False
    found_autologin_timeout = False
    new_lines = []

    for line in lines:
        stripped = line.strip()

        if stripped.startswith("[") and "seat" in stripped.lower():
            in_seat = True
            new_lines.append(line)
            continue
        elif stripped.startswith("["):
            in_seat = False
            new_lines.append(line)
            continue

        if in_seat:
            if stripped.startswith("autologin-user="):
                found_autologin_user = True
                if stripped != f"autologin-user={user}":
                    print(f"üîÅ –ó–∞–º–µ–Ω—è–µ—Ç—Å—è autologin-user ‚Üí {user}")
                    new_lines.append(f"autologin-user={user}\n")
                    changed = True
                else:
                    print("‚úÖ autologin-user —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ—Ä–Ω–æ")
                    new_lines.append(line)
                continue
            elif stripped.startswith("autologin-user-timeout="):
                found_autologin_timeout = True
                if stripped != "autologin-user-timeout=0":
                    print("üîÅ –ó–∞–º–µ–Ω—è–µ—Ç—Å—è autologin-user-timeout ‚Üí 0")
                    new_lines.append("autologin-user-timeout=0\n")
                    changed = True
                else:
                    print("‚úÖ autologin-user-timeout —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0")
                    new_lines.append(line)
                continue

        new_lines.append(line)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not found_autologin_user or not found_autologin_timeout:
        print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏—é [Seat:*]...")
        updated_lines = []
        inserted = False
        for line in new_lines:
            updated_lines.append(line)
            if line.strip().startswith("[Seat:") and not inserted:
                if not found_autologin_user:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è autologin-user={user}")
                    updated_lines.append(f"autologin-user={user}\n")
                if not found_autologin_timeout:
                    print("‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è autologin-user-timeout=0")
                    updated_lines.append("autologin-user-timeout=0\n")
                inserted = True
        new_lines = updated_lines
        changed = True

    if changed:
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LightDM...")
        backup_path = conf_path + ".bak"
        print(f"üìÇ –°–æ–∑–¥–∞—ë—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        subprocess.run(["sudo", "cp", conf_path, backup_path])
        with open("/tmp/50-autologin.conf.new", "w") as f:
            f.writelines(new_lines)
        subprocess.run(["sudo", "cp", "/tmp/50-autologin.conf.new", conf_path])
        print("‚úÖ LightDM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        print("‚úÖ –ê–≤—Ç–æ–ª–æ–≥–∏–Ω —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ LightDM.")


import shutil


def check_xprintidle():
    if shutil.which("xprintidle") is None:
        print(
            "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç xprintidle. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: sudo apt install xprintidle"
        )
        return False
    return True


def set_rtcwake_wakeup(wakeup_dt):
    global next_wakeup_dt
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
    local_tz = datetime.now().astimezone().tzinfo
    wakeup_dt_utc = wakeup_dt.astimezone(timezone.utc)
    epoch = int(wakeup_dt_utc.timestamp())

    print(
        f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ rtcwake –Ω–∞ {wakeup_dt.strftime('%Y-%m-%d %H:%M:%S')} (–ª–æ–∫–∞–ª—å–Ω–æ–µ) -> {wakeup_dt_utc.strftime('%Y-%m-%d %H:%M:%S')} (UTC) -> {epoch}"
    )
    try:
        # -m no ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ–∂–∏–º —Å–Ω–∞, —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        subprocess.run(["rtcwake", "-m", "no", "-t", str(epoch)], check=True)
        if debug:
            print(f"rtcwake: wakeup using /dev/rtc0 at {wakeup_dt_utc} (–ª–æ–∫–∞–ª—å–Ω–æ–µ)")
        set_wake_enabled(True)
        next_wakeup_dt = wakeup_dt
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ rtcwake: {e}")


def set_wakeup_from_config():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç rtcwake –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    now = datetime.now()
    time_str = get_wake_time()  # —Ñ–æ—Ä–º–∞—Ç HH:MM

    try:
        hour, minute = map(int, time_str.split(":"))
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –æ–∂–∏–¥–∞–ª–æ—Å—å HH:MM")
        return

    # –°–æ–∑–¥–∞–µ–º datetime –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    wakeup_dt = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if wakeup_dt <= now:
        wakeup_dt += timedelta(days=1)
        if debug:
            print(
                f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {wakeup_dt.isoformat()} (–ª–æ–∫–∞–ª—å–Ω–æ–µ)"
            )

    if debug:
        print(
            f"‚è± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞) –Ω–∞ {wakeup_dt.isoformat()} (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)"
        )
    set_rtcwake_wakeup(wakeup_dt)
    notify_wakeup_set(wakeup_dt)


def notify_wakeup_set(wakeup_dt):
    subprocess.Popen(
        [
            "notify-send",
            "--icon=alarm",
            "–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            wakeup_dt.strftime("–Ω–∞ %Y-%m-%d %H:%M:%S (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)"),
        ]
    )


def cancel_rtcwake():
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ"""
    try:
        subprocess.run(["rtcwake", "-m", "disable"], check=True)
        print("üóë rtcwake: –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã rtcwake: {e}")


# 2. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
import logging


def setup_logging():
    log_dir = os.path.join(SCRIPT_DIR, "logs")
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, f"{APP_NAME}.log")
    logging.basicConfig(
        level=logging.DEBUG if debug else logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[logging.FileHandler(log_file), logging.StreamHandler()],
    )


# 3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_binaries = [
        "rtcwake",
        "xprintidle",
        "gnome-screenshot",
        "setxkbmap",  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏
    ]

    missing = []
    for bin in required_binaries:
        if shutil.which(bin) is None:
            missing.append(bin)

    if missing:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing)}")
        return False
    return True


# 4. –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
def check_already_running():
    lock_file = os.path.join(SCRIPT_DIR, f"{APP_NAME}.lock")
    try:
        fd = os.open(lock_file, os.O_CREAT | os.O_EXCL | os.O_RDWR)
        with os.fdopen(fd, "w") as f:
            f.write(str(os.getpid()))
        return True
    except OSError:
        logging.error("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return False


def set_english_layout():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    methods = [
        {"cmd": ["setxkbmap", "us"], "name": "setxkbmap (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)"},
        {
            "cmd": [
                "gsettings",
                "set",
                "org.gnome.desktop.input-sources",
                "current",
                "0",
            ],
            "name": "gsettings (–¥–ª—è GNOME)",
        },
        {
            "cmd": ["localectl", "set-x11-keymap", "us"],
            "name": "localectl (—Å–∏—Å—Ç–µ–º–Ω—ã–π –º–µ—Ç–æ–¥)",
        },
    ]

    print("\n=== –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É ===")

    for method in methods:
        print(f"\n–ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {method['name']}")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(method['cmd'])}")

        try:
            result = subprocess.run(
                method["cmd"],
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )

            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            print(f"–í—ã–≤–æ–¥: {result.stdout.strip() or '–Ω–µ—Ç –≤—ã–≤–æ–¥–∞'}")
            return True

        except subprocess.CalledProcessError as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
            print(f"–û—à–∏–±–∫–∞: {e.stderr.strip() or '–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ'}")
            continue

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            continue

    print("\n=== –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ===")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    try:
        print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É:")
        current_layout = subprocess.run(
            ["setxkbmap", "-query"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        print(current_layout.stdout.strip() or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏: {str(e)}")

    return False


class TrayApp(QtWidgets.QSystemTrayIcon):
    def __init__(self, icon, parent=None):
        super().__init__(icon, parent)
        self.app = QtWidgets.QApplication.instance()
        self.setToolTip(APP_NAME)

        self.idle_shutdown_enabled = is_auto_shutdown_enabled()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
        self.init_menu()

        self.idle_check_timer = QtCore.QTimer()
        self.idle_check_timer.timeout.connect(self.check_user_idle)
        self.idle_check_timer.start(30 * 1000)

        self.update_menu()
        self.show()

    def init_menu(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é"""
        self.menu = QtWidgets.QMenu()
        self.setContextMenu(self.menu)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        self.info_action = QtWidgets.QAction("", self)
        self.info_action.setEnabled(False)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.wakeup_action = QtWidgets.QAction("", self)
        self.wakeup_action.triggered.connect(self.toggle_wakeup)

        self.change_time_action = QtWidgets.QAction(
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è...", self
        )
        self.change_time_action.triggered.connect(self.change_wake_time)

        self.terminal_action = QtWidgets.QAction("", self)
        self.terminal_action.triggered.connect(self.toggle_terminal)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.idle_action = QtWidgets.QAction("–í—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ", self)
        self.idle_action.setCheckable(True)
        self.idle_action.setChecked(is_auto_shutdown_enabled())
        self.idle_action.toggled.connect(self.toggle_idle_shutdown)

        self.telegram_action = QtWidgets.QAction("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–Ω–∏–º–æ–∫ –≤ –¢–ì", self)
        self.telegram_action.setCheckable(True)
        self.telegram_action.setChecked(is_telegram_enabled())
        self.telegram_action.toggled.connect(self.toggle_telegram)

        self.change_idle_timeout_action = QtWidgets.QAction(
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è...", self
        )
        self.change_idle_timeout_action.triggered.connect(self.change_idle_timeout)

        # –í—ã—Ö–æ–¥
        self.exit_action = QtWidgets.QAction("–í—ã—Ö–æ–¥", self)
        self.exit_action.triggered.connect(self.clean_exit)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    def update_menu(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        self.menu.clear()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
        time_str = get_wake_time()
        if is_wake_enabled():
            info_text = f"–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {time_str}"
        else:
            info_text = f"–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞: {time_str}"
        self.info_action.setText(info_text)
        self.menu.addAction(self.info_action)

        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        if is_wake_enabled():
            self.wakeup_action.setText("–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ")
        else:
            self.wakeup_action.setText("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ")
        self.menu.addAction(self.wakeup_action)

        # –°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.menu.addAction(self.change_time_action)

        # –ß–µ–∫–±–æ–∫—Å "–í—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ"
        self.idle_action = QtWidgets.QAction(
            f"–í—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ {get_idle_timeout()} —Å–µ–∫. ", self
        )
        self.idle_action.setCheckable(True)
        self.idle_action.setChecked(is_auto_shutdown_enabled())
        self.idle_action.toggled.connect(self.toggle_idle_shutdown)
        self.menu.addAction(self.idle_action)

        # –°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è
        self.menu.addAction(self.change_idle_timeout_action)

        # –ß–µ–∫–±–æ–∫—Å "–í—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ"
        self.telegram_action = QtWidgets.QAction(f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–Ω–∏–º–æ–∫ –≤ –¢–ì", self)
        self.telegram_action.setCheckable(True)
        self.telegram_action.setChecked(is_telegram_enabled())
        self.telegram_action.toggled.connect(self.toggle_telegram)
        self.menu.addAction(self.telegram_action)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        if is_terminal_enabled():
            self.terminal_action.setText("–°–∫—Ä—ã–≤–∞—Ç—å –¢–µ—Ä–º–∏–Ω–∞–ª")
        else:
            self.terminal_action.setText("–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¢–µ—Ä–º–∏–Ω–∞–ª")
        self.menu.addAction(self.terminal_action)

        self.menu.addSeparator()
        self.menu.addAction(self.exit_action)

    def clean_exit(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
            self.idle_check_timer.stop()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if hasattr(self, "idle_shutdown_enabled"):
                data = load_wake_data()
                data["auto_shutdown"] = self.idle_shutdown_enabled
                save_wake_data(data)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ GUI
            self.hide()
            self.app.quit()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            sys.exit(1)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # ...

    def toggle_wakeup(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        if is_wake_enabled():
            print("‚ùé –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ")
            cancel_rtcwake()
            set_wake_enabled(False)
        else:
            print("‚úÖ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ")
            self.set_wakeup()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rtcwake
            # set_wake_enabled(True)
        self.update_menu()

    def prompt_telegram_config(self):
        token, ok1 = QtWidgets.QInputDialog.getText(
            None, "Telegram Token", "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token:"
        )
        if not ok1 or not token.strip():
            return

        chat_id, ok2 = QtWidgets.QInputDialog.getText(
            None, "Telegram Chat ID", "–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID:"
        )
        if not ok2 or not chat_id.strip():
            return

        data = load_wake_data()
        data["telegram_token"] = token.strip()
        data["telegram_chat_id"] = chat_id.strip()
        save_wake_data(data)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    def toggle_terminal(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –≤ –¢–µ—Ä–∏–º–∏–Ω–∞–ª"""
        if is_terminal_enabled():
            print("‚ùé –û—Ç–∫–ª—é—á–∞–µ–º –¢–µ—Ä–º–∏–Ω–∞–ª")
            set_terminal_enabled(False)
        else:
            print("‚úÖ –í–∫–ª—é—á–∞–µ–º –¢–µ—Ä–º–∏–Ω–∞–ª")
            set_terminal_enabled(True)
        ensure_autostart()
        self.update_menu()

    def set_wakeup(self):
        global next_wakeup_dt
        now = datetime.now()
        # now = datetime.now(timezone.utc)
        print(f"‚è± now = {now.isoformat()} local time")

        time_str = get_wake_time()  # —Ñ–æ—Ä–º–∞—Ç HH:MM
        try:
            hour, minute = map(int, time_str.split(":"))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –æ–∂–∏–¥–∞–ª–æ—Å—å HH:MM")
            return

        wakeup_dt = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if wakeup_dt <= now:
            wakeup_dt += timedelta(days=1)
            if debug:
                print(
                    f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {wakeup_dt.isoformat()} local time"
                )
        if debug:
            print(f"‚è± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –Ω–∞ {wakeup_dt.isoformat()} local time")
        set_rtcwake_wakeup(wakeup_dt)
        next_wakeup_dt = wakeup_dt  # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    def change_wake_time(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        current = get_wake_time()
        try:
            hour, minute = map(int, current.split(":"))
        except:
            hour, minute = 7, 0

        time_dialog = QtWidgets.QTimeEdit()
        time_dialog.setTime(QtCore.QTime(hour, minute))
        time_dialog.setDisplayFormat("HH:mm")
        time_dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è")
        time_dialog.setFixedWidth(100)

        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è")
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(QtWidgets.QLabel("–í—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã):"))
        layout.addWidget(time_dialog)

        buttons = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)
        dialog.setLayout(layout)

        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            new_time = time_dialog.time().toString("HH:mm")
            set_wake_time(new_time)

            print(f"‚è± –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {new_time}")
            if is_wake_enabled():
                self.set_wakeup()  # –ø–µ—Ä–µ—Å—á—ë—Ç rtcwake
            self.update_menu()

    ###############################
    def change_idle_timeout(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        current = get_idle_timeout()

        spin_box = QtWidgets.QSpinBox()
        spin_box.setRange(10, 86400)  # –æ—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–æ 24 —á–∞—Å–æ–≤
        spin_box.setValue(current)
        # spin_box.setSuffix(" —Å–µ–∫.")
        spin_box.setSingleStep(10)

        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è")
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(QtWidgets.QLabel("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:"))
        layout.addWidget(spin_box)

        buttons = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)
        dialog.setLayout(layout)

        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            new_timeout = spin_box.value()
            set_idle_timeout(new_timeout)
            print(f"‚è± –ù–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è: {new_timeout} —Å–µ–∫.")
            self.update_menu()

    def toggle_idle_shutdown(self, checked):
        print(f"üåì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {checked}")
        set_auto_shutdown(checked)
        self.idle_shutdown_enabled = checked

    def toggle_telegram(self, checked):
        print(f" –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–Ω–∏–º–∫–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º: {checked}")
        set_telegram_enabled(checked)
        self.telegram_enabled = checked

        if checked:
            data = load_wake_data()
            if not data.get("telegram_token") or not data.get("telegram_chat_id"):
                self.prompt_telegram_config()

    def check_user_idle(self):
        try:
            if not self.idle_shutdown_enabled:
                return

            idle_ms = int(subprocess.check_output(["xprintidle"]).decode().strip())
            idle_sec = idle_ms / 1000

            if idle_sec >= get_idle_timeout():
                if (
                    is_wake_enabled()
                    and isinstance(next_wakeup_dt, datetime)
                    and next_wakeup_dt > datetime.now()
                ):
                    print(
                        f"üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ê–≤—Ç–æ–≤—ã–∫–ª—é—á–µ–Ω–∏–µ... –ë—É–¥–µ—Ç –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤ {next_wakeup_dt}"
                    )
                    print(f" —Å–µ–π—á–∞—Å datetime.now() = {datetime.now()}")
                    self.show_shutdown_warning()
                else:
                    print(
                        "‚ö†Ô∏è –ê–≤—Ç–æ–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚Äî –Ω–µ –∑–∞–¥–∞–Ω–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º."
                    )
                    set_wakeup_from_config()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ç–æ—è: {e}")

    def show_shutdown_warning(self):
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–Ω–∏–º–∫–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ...")
        if is_telegram_enabled():
            capture_camera_and_send("Before power off")
            capture_screen_and_send("Before power off")
        dialog = QtWidgets.QMessageBox()
        dialog.setIcon(QtWidgets.QMessageBox.Warning)
        dialog.setWindowTitle("–ê–≤—Ç–æ–≤—ã–∫–ª—é—á–µ–Ω–∏–µ")
        dialog.setText("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.")
        dialog.setInformativeText("–ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ.")
        dialog.setStandardButtons(
            QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel
        )
        dialog.setDefaultButton(QtWidgets.QMessageBox.Cancel)

        cancelled = {"value": False}

        def proceed_shutdown():
            if not cancelled["value"]:

                # subprocess.run(["systemctl", "poweroff"])
                # –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                subprocess.run(["systemctl", "poweroff", "-i"])

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç
            dialog.done(0)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        QtCore.QTimer.singleShot(30_000, proceed_shutdown)

        result = dialog.exec_()
        if result == QtWidgets.QMessageBox.Cancel:
            cancelled["value"] = True
            print("‚èπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ.")
        else:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ.")


tray = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è TrayApp


def main():
    global tray

    # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É pip –∏ –º–æ–¥—É–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    # if not check_already_running():
    # sys.exit(1)

    setup_logging()
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    set_english_layout()

    try:
        # if not check_dependencies():
        # sys.exit(1)
        # install_missing_modules()
        # if not install_missing_modules():
        # sys.exit(1)

        load_wake_data()
        ensure_telegram_config()
        if is_telegram_enabled():
            try:
                capture_camera_and_send("On boot")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")

        show_startup_notification()
        ensure_autostart()
        ensure_rtc_access()
        add_cap_sys_time()
        dm = detect_display_manager()
        if dm == "gdm3":
            ensure_gdm_autologin_enabled()
        elif dm == "lightdm":
            ensure_lightdm_autologin_enabled()

        if not check_xprintidle():
            logging.warning("xprintidle –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        app = QtWidgets.QApplication(sys.argv)
        app.setQuitOnLastWindowClosed(False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        # signal.signal(signal.SIGINT, lambda *args: app.quit())

        if not QtWidgets.QSystemTrayIcon.isSystemTrayAvailable():
            QtWidgets.QMessageBox.critical(None, "–û—à–∏–±–∫–∞", "–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            capture_screen_and_send("On boot. Error")
            sys.exit(1)

        dummy_window = QtWidgets.QWidget()
        dummy_window.setAttribute(QtCore.Qt.WA_DontShowOnScreen)
        dummy_window.setWindowFlags(QtCore.Qt.Tool | QtCore.Qt.FramelessWindowHint)
        dummy_window.setVisible(True)
        QtGui.QIcon.setThemeName("Yaru")
        icon = QtGui.QIcon.fromTheme("system-shutdown")
        #capture_screen_and_send("On boot1")

        def delayed_start():
            global tray
            try:
                tray = TrayApp(icon, parent=dummy_window)
                if is_wake_enabled():
                    set_wakeup_from_config()
                    capture_screen_and_send("On boot")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ—è: {e}")
                capture_screen_and_send("On boot. Error")
                sys.exit(1)

        QtCore.QTimer.singleShot(2000, delayed_start)
        #capture_screen_and_send("On boot2")
        sys.exit(app.exec_())
        
        
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        capture_screen_and_send("On boot. Error")
        sys.exit(1)


if __name__ == "__main__":
    main()
